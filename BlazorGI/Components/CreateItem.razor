@page "/create"
@using GarangeInventory.Storage;
@using GarangeInventory.Enum;

@inject Data.DataService Data;



<p>New item creation page!</p>

<EditForm Model="@newItem" OnValidSubmit="SaveItem">
    <label for="name">Item Name</label>
    <InputText @bind-Value="newItem.Name"></InputText>
    <br />

    <label for="quantity">Quantity</label>
    <InputNumber @bind-Value="newItem.Quantity"></InputNumber>
    <br />
    <label for="cost">Item Cost $</label>
    <InputNumber @bind-Value="newItem.Cost"></InputNumber>
    <br />

    <label for="weight">Weight</label>
    <InputNumber @bind-Value="newItem.Weight"></InputNumber>
    <br />

    <label for="weightCategory">Kilograms,Litres,Gramms</label>
    <InputSelect @bind-Value="newItem.WeightType">
        @foreach (var weightType in weightTypes)
        {
            <option>@weightType</option>
        }
    </InputSelect>
    <br />

    <label for="expiry">Expiry</label>
    <InputDate @bind-Value="newItem.Expiry"></InputDate>
    <br />

    <label for="purchaseDate">Purchase Date</label>
    <InputDate @bind-Value="newItem.PurchaseDate"></InputDate>
    <br />

    <label for="size"></label>
    <InputSelect @bind-Value="newItem.Size">
        @foreach (var sizeType in sizeTypes)
        {
            <option>@sizeType</option>
        }
    </InputSelect>
    <br />

    <label for="itemCategory"></label>
    <InputSelect @bind-Value="newItem.ItemCategory">
        @foreach (var category in itemCategory)
        {
            <option>@category</option>
        }
    </InputSelect>
    <br />

    <label for="note">Note</label>
    <InputText @bind-Value="newItem.Note"></InputText>
    <br />

    <SelectLocation @bind-pickedStorageUnit="storageUnit" @bind-pickedShelfUnit="@shelfUnit" @bind-pickedShelf="shelf" @bind-pickedBox="box"></SelectLocation>

    <br />
    <button type="submit">Save, does nothing for now</button>

</EditForm>
<br />

@SuccessStatusMessage

@code {
    Item newItem = new();
    StorageUnit storageUnit;
    ShelfUnit shelfUnit;
    Shelf shelf;
    Box box;

    private readonly IEnumerable<WeightType> weightTypes = Enum.GetValues<WeightType>();
    private readonly IEnumerable<SizeType> sizeTypes = Enum.GetValues<SizeType>();
    private readonly IEnumerable<Category> itemCategory = Enum.GetValues<Category>();

    private string? SuccessStatusMessage { get; set; }

    private void SaveItem()
    {

        if (newItem.Name == null || storageUnit == null)
        {
            if (newItem.Name == null)
                SuccessStatusMessage = "Please input item name!";
            if (storageUnit == null)
                SuccessStatusMessage = "Storage has not been selected";
        }

        if (newItem.Name != null && storageUnit != null)
        {
            newItem.ID = Data.GetMaxID();
            if (box == null)
            {
                if (shelf == null)
                {
                    if (shelfUnit != null)
                    {
                        shelfUnit.Items.Add(newItem);
                        SuccessStatusMessage = $"{newItem.Name} saved sucessfully to {shelfUnit.Name} !";
                    }
                }
                if (shelf != null)
                {
                    shelf.Items.Add(newItem);
                    SuccessStatusMessage = $"{newItem.Name} saved sucessfully to {shelf.Name} !";
                }
            }
            if (box != null)
            {
                box.Items.Add(newItem);
                SuccessStatusMessage = $"{newItem.Name} saved sucessfully to {box.Name} !";
            }

            if (SuccessStatusMessage == null)
            {
                SuccessStatusMessage = $"Failed to save !!!";
            }
            ResetObjects();
        }
    }

    private void ResetObjects()
    {
        newItem = new();
        storageUnit = null;
        shelfUnit = null;
        shelf = null;
        box = null;
    }
}


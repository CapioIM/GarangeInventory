@using GarangeInventory.Storage
@inject Data.DataService Data;

@if (Data != null)
{
    <label for="storage">Storage Unit</label>
    <InputSelect id="storage" @bind-Value="selectedStorageID" @bind-Value:after="SetStorage" TValue="int?" >
        <option value="">Select...</option>
        @if (Data.Storages != null)
        {
            @foreach (StorageUnit storage in Data.Storages)
            {
                <option @key="storage.ID" value="@storage.ID">@storage.Name</option>
            }
        }
    </InputSelect>
}

<br />

@if (pickedStorageUnit != null)
{
    <label for="shelfUnit">Shelf Unit</label>
    <InputSelect id="shelfUnit" @bind-Value="selectedShelfUnitID" @bind-Value:after="SetStorageUnit" TValue="int?">
        @if (pickedStorageUnit.ShelfUnits != null)
        {
            <option value="">Select...</option>
            @foreach (ShelfUnit shelfUnit in pickedStorageUnit.ShelfUnits)
            {
                <option @key="shelfUnit.ID" value="@shelfUnit.ID">@shelfUnit.Name</option>
            }
        }
    </InputSelect>
}

@if (pickedShelfUnit != null)
{
    <label for="boxOnSU">Box</label>
    <InputSelect id="boxOnSU" @bind-Value="selectedBoxID" @bind-Value:after="SetBox" TValue="int?">
        @if (pickedShelfUnit.Boxes != null)
        {
            <option value="">Select...</option>
            @foreach (Box box in pickedShelfUnit.Boxes)
            {
                <option @key="box.ID" value="@box.ID">@box.Name</option>
            }
        }
    </InputSelect>
}

<br />

@if (pickedShelfUnit != null)
{
    <label for="shelf">Shelf</label>
    <InputSelect id="shelf" @bind-Value="selectedShelfID" @bind-Value:after="SetShelf" TValue="int?">
        @if (pickedShelfUnit.Shelfs != null)
        {
            <option value="">Select...</option>
            @foreach (Shelf shelf in pickedShelfUnit.Shelfs)
            {
                <option @key="shelf.ID" value="@shelf.ID">@shelf.Name</option>
            }
        }
    </InputSelect>
}


@if (pickedShelf != null)
{
    <label for="box">Box</label>
    <InputSelect id="box" @bind-Value="selectedBoxID" @bind-Value:after="SetBox" TValue="int?">
        @if (pickedShelf.Boxes != null)
        {
            <option value="">Select...</option>
            @foreach (Box box in pickedShelf.Boxes)
            {
                <option @key="box.ID" value="@box.ID">@box.Name</option>
            }
        }
    </InputSelect>
}






@code {
    [Parameter]
    public StorageUnit pickedStorageUnit { get; set; }
    [Parameter]
    public EventCallback<StorageUnit> pickedStorageUnitChanged { get; set; }

    [Parameter]
    public ShelfUnit pickedShelfUnit { get; set; }
    [Parameter]
    public EventCallback<ShelfUnit> pickedShelfUnitChanged { get; set; }

    [Parameter]
    public Shelf pickedShelf { get; set; }
    [Parameter]
    public EventCallback<Shelf> pickedShelfChanged { get; set; }

    [Parameter]
    public Box pickedBox { get; set; }
    [Parameter]
    public EventCallback<Box> pickedBoxChanged { get; set; }

    private int? selectedStorageID { get; set; }
    private int? selectedShelfUnitID { get; set; }
    private int? selectedShelfID { get; set; }
    private int? selectedBoxID { get; set; }




    private void SetStorage()
    {
        pickedStorageUnit = Data.Storages.FirstOrDefault(storag => storag.ID == selectedStorageID);
        pickedStorageUnitChanged.InvokeAsync(pickedStorageUnit);
    }
    private void SetStorageUnit()
    {
        pickedShelfUnit = pickedStorageUnit.ShelfUnits.FirstOrDefault(ShelfU => ShelfU.ID == selectedShelfUnitID);
        pickedShelfUnitChanged.InvokeAsync(pickedShelfUnit);
    }
    private void SetBox()
    {
        pickedBox = pickedShelfUnit.Boxes.FirstOrDefault(box => box.ID == selectedBoxID);
        pickedBoxChanged.InvokeAsync(pickedBox);
    }
    private void SetShelf()
    {
        pickedShelf = pickedShelfUnit.Shelfs.FirstOrDefault(Shelf => Shelf.ID == selectedShelfID);
        pickedShelfChanged.InvokeAsync(pickedShelf);
    }
}

@page "/storage/{iD:int}"
@inject Data.DataService Data
@using GarangeInventory.Storage
@using Microsoft.AspNetCore.Components.QuickGrid


<PageTitle>Storage</PageTitle>

<h3>Storage:@DisplayStorageName();</h3>

<QuickGrid Items="@Data.GetItemsFromStorageUnit(ID).AsQueryable()">
    <TemplateColumn Title="Item Name">
        <a href="/locationdetail/@context.ID"> @context.Name </a>
    </TemplateColumn>

    <TemplateColumn Title="ShelfUnit">
        <a href="/locationdetail/@context.ID">
            @{
                var shelfUnit = GetShelfUnit(context);
            }
            @if (shelfUnit != null)
            {
                <span> @shelfUnit.Name </span>
            }
            else
            {
                <span> Shelf Unit not Found! </span>
            }
        </a>
    </TemplateColumn>
</QuickGrid>

@code {
    [Parameter]
    public int ID { get; set; }

    private IQueryable<ShelfUnit> ShelfUnitQueryable()
    {
        var queryableShelfUnit = Data.Storages
        .Where(storages => storages.ID == ID)
        .SelectMany(sbyt => sbyt.ShelfUnits)
        .AsQueryable();
        return queryableShelfUnit;
    }

    private string DisplayStorageName()
    {
        StorageUnit storage = Data.Storages.FirstOrDefault(storages => storages.ID == ID);
        if (storage != null)
        {
            return storage.Name;
        }
        return "No storage Unit avaialble.";
    }



    private Box GetBoxForItem(Item itemToBeFound)
    {
        StorageUnit storageUnit = Data.Storages.FirstOrDefault(storage => storage.ID == ID);

        if(storageUnit == null)
        { return null; }

        foreach (ShelfUnit shelfUnit in storageUnit.ShelfUnits)
        {
            foreach (Box boxOnShelfUnit in shelfUnit.Boxes)
            {
                if (boxOnShelfUnit.Items.Any(item => item.ID == itemToBeFound.ID))
                    return boxOnShelfUnit;

                foreach (Shelf shelf in shelfUnit.Shelfs)
                {
                    if (shelf.Items.Any(item => item.ID == itemToBeFound.ID))
                        return null;

                    foreach (Box boxOnShelf in shelf.Boxes)
                    {
                        if (boxOnShelf.Items.Any(item => item.ID == itemToBeFound.ID))
                            return boxOnShelf;
                    }
                }
            }
        }

        return null;
    }

    /// <summary>
    /// search for item in Shelfunit
    /// </summary>
    /// <param name="itemToBeFound"></param>
    /// <returns> returns found shelfUnit or empty shelfUnit if item ID is not found inside</returns>
    private ShelfUnit GetShelfUnit(Item itemToBeFound)
    {
        if (itemToBeFound != null)
        {
            StorageUnit storageUnit = Data.Storages.FirstOrDefault(storage => storage.ID == ID);
            if (storageUnit == null)
            { return null; }

            foreach (ShelfUnit shelfUnit in storageUnit.ShelfUnits)
            {
                if (shelfUnit.Items.Any(i => i.ID == itemToBeFound.ID))
                    return shelfUnit;
                foreach (Shelf shelf in shelfUnit.Shelfs)
                {
                    if (shelf.Items.Any(i => i.ID == itemToBeFound.ID))
                        return shelfUnit;
                    foreach (Box box in shelf.Boxes)
                    {
                        if (box.Items.Any(i => i.ID == itemToBeFound.ID))
                            return shelfUnit;
                    }
                }
                foreach (Box box in shelfUnit.Boxes)
                {
                    if (box.Items.Any(i => i.ID == itemToBeFound.ID))
                        return shelfUnit;
                }
            }
        }
        return null;
    }
}
